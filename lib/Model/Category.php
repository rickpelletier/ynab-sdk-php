<?php
/**
 * Category
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  RickPelletier\YnabSDKPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RickPelletier\YnabSDKPHP\Model;

use \ArrayAccess;
use \RickPelletier\YnabSDKPHP\ObjectSerializer;

/**
 * Category Class Doc Comment
 *
 * @category Class
 * @package  RickPelletier\YnabSDKPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Category implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Category';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'category_group_id' => 'string',
        'name' => 'string',
        'hidden' => 'bool',
        'original_category_group_id' => 'string',
        'note' => 'string',
        'budgeted' => 'int',
        'activity' => 'int',
        'balance' => 'int',
        'goal_type' => 'string',
        'goal_creation_month' => '\DateTime',
        'goal_target' => 'int',
        'goal_target_month' => '\DateTime',
        'goal_percentage_complete' => 'int',
        'goal_months_to_budget' => 'int',
        'goal_under_funded' => 'int',
        'goal_overall_funded' => 'int',
        'goal_overall_left' => 'int',
        'deleted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'category_group_id' => 'uuid',
        'name' => null,
        'hidden' => null,
        'original_category_group_id' => 'uuid',
        'note' => null,
        'budgeted' => 'int64',
        'activity' => 'int64',
        'balance' => 'int64',
        'goal_type' => null,
        'goal_creation_month' => 'date',
        'goal_target' => 'int64',
        'goal_target_month' => 'date',
        'goal_percentage_complete' => 'int32',
        'goal_months_to_budget' => 'int32',
        'goal_under_funded' => 'int64',
        'goal_overall_funded' => 'int64',
        'goal_overall_left' => 'int64',
        'deleted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'category_group_id' => 'category_group_id',
        'name' => 'name',
        'hidden' => 'hidden',
        'original_category_group_id' => 'original_category_group_id',
        'note' => 'note',
        'budgeted' => 'budgeted',
        'activity' => 'activity',
        'balance' => 'balance',
        'goal_type' => 'goal_type',
        'goal_creation_month' => 'goal_creation_month',
        'goal_target' => 'goal_target',
        'goal_target_month' => 'goal_target_month',
        'goal_percentage_complete' => 'goal_percentage_complete',
        'goal_months_to_budget' => 'goal_months_to_budget',
        'goal_under_funded' => 'goal_under_funded',
        'goal_overall_funded' => 'goal_overall_funded',
        'goal_overall_left' => 'goal_overall_left',
        'deleted' => 'deleted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'category_group_id' => 'setCategoryGroupId',
        'name' => 'setName',
        'hidden' => 'setHidden',
        'original_category_group_id' => 'setOriginalCategoryGroupId',
        'note' => 'setNote',
        'budgeted' => 'setBudgeted',
        'activity' => 'setActivity',
        'balance' => 'setBalance',
        'goal_type' => 'setGoalType',
        'goal_creation_month' => 'setGoalCreationMonth',
        'goal_target' => 'setGoalTarget',
        'goal_target_month' => 'setGoalTargetMonth',
        'goal_percentage_complete' => 'setGoalPercentageComplete',
        'goal_months_to_budget' => 'setGoalMonthsToBudget',
        'goal_under_funded' => 'setGoalUnderFunded',
        'goal_overall_funded' => 'setGoalOverallFunded',
        'goal_overall_left' => 'setGoalOverallLeft',
        'deleted' => 'setDeleted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'category_group_id' => 'getCategoryGroupId',
        'name' => 'getName',
        'hidden' => 'getHidden',
        'original_category_group_id' => 'getOriginalCategoryGroupId',
        'note' => 'getNote',
        'budgeted' => 'getBudgeted',
        'activity' => 'getActivity',
        'balance' => 'getBalance',
        'goal_type' => 'getGoalType',
        'goal_creation_month' => 'getGoalCreationMonth',
        'goal_target' => 'getGoalTarget',
        'goal_target_month' => 'getGoalTargetMonth',
        'goal_percentage_complete' => 'getGoalPercentageComplete',
        'goal_months_to_budget' => 'getGoalMonthsToBudget',
        'goal_under_funded' => 'getGoalUnderFunded',
        'goal_overall_funded' => 'getGoalOverallFunded',
        'goal_overall_left' => 'getGoalOverallLeft',
        'deleted' => 'getDeleted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const GOAL_TYPE_TB = 'TB';
    const GOAL_TYPE_TBD = 'TBD';
    const GOAL_TYPE_MF = 'MF';
    const GOAL_TYPE_NEED = 'NEED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGoalTypeAllowableValues()
    {
        return [
            self::GOAL_TYPE_TB,
            self::GOAL_TYPE_TBD,
            self::GOAL_TYPE_MF,
            self::GOAL_TYPE_NEED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['category_group_id'] = $data['category_group_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['hidden'] = $data['hidden'] ?? null;
        $this->container['original_category_group_id'] = $data['original_category_group_id'] ?? null;
        $this->container['note'] = $data['note'] ?? null;
        $this->container['budgeted'] = $data['budgeted'] ?? null;
        $this->container['activity'] = $data['activity'] ?? null;
        $this->container['balance'] = $data['balance'] ?? null;
        $this->container['goal_type'] = $data['goal_type'] ?? null;
        $this->container['goal_creation_month'] = $data['goal_creation_month'] ?? null;
        $this->container['goal_target'] = $data['goal_target'] ?? null;
        $this->container['goal_target_month'] = $data['goal_target_month'] ?? null;
        $this->container['goal_percentage_complete'] = $data['goal_percentage_complete'] ?? null;
        $this->container['goal_months_to_budget'] = $data['goal_months_to_budget'] ?? null;
        $this->container['goal_under_funded'] = $data['goal_under_funded'] ?? null;
        $this->container['goal_overall_funded'] = $data['goal_overall_funded'] ?? null;
        $this->container['goal_overall_left'] = $data['goal_overall_left'] ?? null;
        $this->container['deleted'] = $data['deleted'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['category_group_id'] === null) {
            $invalidProperties[] = "'category_group_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['hidden'] === null) {
            $invalidProperties[] = "'hidden' can't be null";
        }
        if ($this->container['budgeted'] === null) {
            $invalidProperties[] = "'budgeted' can't be null";
        }
        if ($this->container['activity'] === null) {
            $invalidProperties[] = "'activity' can't be null";
        }
        if ($this->container['balance'] === null) {
            $invalidProperties[] = "'balance' can't be null";
        }
        $allowedValues = $this->getGoalTypeAllowableValues();
        if (!is_null($this->container['goal_type']) && !in_array($this->container['goal_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'goal_type', must be one of '%s'",
                $this->container['goal_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['deleted'] === null) {
            $invalidProperties[] = "'deleted' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets category_group_id
     *
     * @return string
     */
    public function getCategoryGroupId()
    {
        return $this->container['category_group_id'];
    }

    /**
     * Sets category_group_id
     *
     * @param string $category_group_id category_group_id
     *
     * @return self
     */
    public function setCategoryGroupId($category_group_id)
    {
        $this->container['category_group_id'] = $category_group_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden Whether or not the category is hidden
     *
     * @return self
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets original_category_group_id
     *
     * @return string|null
     */
    public function getOriginalCategoryGroupId()
    {
        return $this->container['original_category_group_id'];
    }

    /**
     * Sets original_category_group_id
     *
     * @param string|null $original_category_group_id If category is hidden this is the id of the category group it originally belonged to before it was hidden.
     *
     * @return self
     */
    public function setOriginalCategoryGroupId($original_category_group_id)
    {
        $this->container['original_category_group_id'] = $original_category_group_id;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets budgeted
     *
     * @return int
     */
    public function getBudgeted()
    {
        return $this->container['budgeted'];
    }

    /**
     * Sets budgeted
     *
     * @param int $budgeted Budgeted amount in milliunits format
     *
     * @return self
     */
    public function setBudgeted($budgeted)
    {
        $this->container['budgeted'] = $budgeted;

        return $this;
    }

    /**
     * Gets activity
     *
     * @return int
     */
    public function getActivity()
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     *
     * @param int $activity Activity amount in milliunits format
     *
     * @return self
     */
    public function setActivity($activity)
    {
        $this->container['activity'] = $activity;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return int
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param int $balance Balance in milliunits format
     *
     * @return self
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets goal_type
     *
     * @return string|null
     */
    public function getGoalType()
    {
        return $this->container['goal_type'];
    }

    /**
     * Sets goal_type
     *
     * @param string|null $goal_type The type of goal, if the category has a goal (TB='Target Category Balance', TBD='Target Category Balance by Date', MF='Monthly Funding', NEED='Plan Your Spending')
     *
     * @return self
     */
    public function setGoalType($goal_type)
    {
        $allowedValues = $this->getGoalTypeAllowableValues();
        if (!is_null($goal_type) && !in_array($goal_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'goal_type', must be one of '%s'",
                    $goal_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['goal_type'] = $goal_type;

        return $this;
    }

    /**
     * Gets goal_creation_month
     *
     * @return \DateTime|null
     */
    public function getGoalCreationMonth()
    {
        return $this->container['goal_creation_month'];
    }

    /**
     * Sets goal_creation_month
     *
     * @param \DateTime|null $goal_creation_month The month a goal was created
     *
     * @return self
     */
    public function setGoalCreationMonth($goal_creation_month)
    {
        $this->container['goal_creation_month'] = $goal_creation_month;

        return $this;
    }

    /**
     * Gets goal_target
     *
     * @return int|null
     */
    public function getGoalTarget()
    {
        return $this->container['goal_target'];
    }

    /**
     * Sets goal_target
     *
     * @param int|null $goal_target The goal target amount in milliunits
     *
     * @return self
     */
    public function setGoalTarget($goal_target)
    {
        $this->container['goal_target'] = $goal_target;

        return $this;
    }

    /**
     * Gets goal_target_month
     *
     * @return \DateTime|null
     */
    public function getGoalTargetMonth()
    {
        return $this->container['goal_target_month'];
    }

    /**
     * Sets goal_target_month
     *
     * @param \DateTime|null $goal_target_month The original target month for the goal to be completed.  Only some goal types specify this date.
     *
     * @return self
     */
    public function setGoalTargetMonth($goal_target_month)
    {
        $this->container['goal_target_month'] = $goal_target_month;

        return $this;
    }

    /**
     * Gets goal_percentage_complete
     *
     * @return int|null
     */
    public function getGoalPercentageComplete()
    {
        return $this->container['goal_percentage_complete'];
    }

    /**
     * Sets goal_percentage_complete
     *
     * @param int|null $goal_percentage_complete The percentage completion of the goal
     *
     * @return self
     */
    public function setGoalPercentageComplete($goal_percentage_complete)
    {
        $this->container['goal_percentage_complete'] = $goal_percentage_complete;

        return $this;
    }

    /**
     * Gets goal_months_to_budget
     *
     * @return int|null
     */
    public function getGoalMonthsToBudget()
    {
        return $this->container['goal_months_to_budget'];
    }

    /**
     * Sets goal_months_to_budget
     *
     * @param int|null $goal_months_to_budget The number of months, including the current month, left in the current goal period.
     *
     * @return self
     */
    public function setGoalMonthsToBudget($goal_months_to_budget)
    {
        $this->container['goal_months_to_budget'] = $goal_months_to_budget;

        return $this;
    }

    /**
     * Gets goal_under_funded
     *
     * @return int|null
     */
    public function getGoalUnderFunded()
    {
        return $this->container['goal_under_funded'];
    }

    /**
     * Sets goal_under_funded
     *
     * @param int|null $goal_under_funded The amount of funding still needed in the current month to stay on track towards completing the goal within the current goal period.  This amount will generally correspond to the 'Underfunded' amount in the web and mobile clients except when viewing a category with a Needed for Spending Goal in a future month.  The web and mobile clients will ignore any funding from a prior goal period when viewing category with a Needed for Spending Goal in a future month.
     *
     * @return self
     */
    public function setGoalUnderFunded($goal_under_funded)
    {
        $this->container['goal_under_funded'] = $goal_under_funded;

        return $this;
    }

    /**
     * Gets goal_overall_funded
     *
     * @return int|null
     */
    public function getGoalOverallFunded()
    {
        return $this->container['goal_overall_funded'];
    }

    /**
     * Sets goal_overall_funded
     *
     * @param int|null $goal_overall_funded The total amount funded towards the goal within the current goal period.
     *
     * @return self
     */
    public function setGoalOverallFunded($goal_overall_funded)
    {
        $this->container['goal_overall_funded'] = $goal_overall_funded;

        return $this;
    }

    /**
     * Gets goal_overall_left
     *
     * @return int|null
     */
    public function getGoalOverallLeft()
    {
        return $this->container['goal_overall_left'];
    }

    /**
     * Sets goal_overall_left
     *
     * @param int|null $goal_overall_left The amount of funding still needed to complete the goal within the current goal period.
     *
     * @return self
     */
    public function setGoalOverallLeft($goal_overall_left)
    {
        $this->container['goal_overall_left'] = $goal_overall_left;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted Whether or not the category has been deleted.  Deleted categories will only be included in delta requests.
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



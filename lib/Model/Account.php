<?php
/**
 * Account
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  RickPelletier\YnabSDKPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RickPelletier\YnabSDKPHP\Model;

use \ArrayAccess;
use \RickPelletier\YnabSDKPHP\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @package  RickPelletier\YnabSDKPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Account implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'type' => 'string',
        'on_budget' => 'bool',
        'closed' => 'bool',
        'note' => 'string',
        'balance' => 'int',
        'cleared_balance' => 'int',
        'uncleared_balance' => 'int',
        'transfer_payee_id' => 'string',
        'direct_import_linked' => 'bool',
        'direct_import_in_error' => 'bool',
        'deleted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'name' => null,
        'type' => null,
        'on_budget' => null,
        'closed' => null,
        'note' => null,
        'balance' => 'int64',
        'cleared_balance' => 'int64',
        'uncleared_balance' => 'int64',
        'transfer_payee_id' => 'uuid',
        'direct_import_linked' => null,
        'direct_import_in_error' => null,
        'deleted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'on_budget' => 'on_budget',
        'closed' => 'closed',
        'note' => 'note',
        'balance' => 'balance',
        'cleared_balance' => 'cleared_balance',
        'uncleared_balance' => 'uncleared_balance',
        'transfer_payee_id' => 'transfer_payee_id',
        'direct_import_linked' => 'direct_import_linked',
        'direct_import_in_error' => 'direct_import_in_error',
        'deleted' => 'deleted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'on_budget' => 'setOnBudget',
        'closed' => 'setClosed',
        'note' => 'setNote',
        'balance' => 'setBalance',
        'cleared_balance' => 'setClearedBalance',
        'uncleared_balance' => 'setUnclearedBalance',
        'transfer_payee_id' => 'setTransferPayeeId',
        'direct_import_linked' => 'setDirectImportLinked',
        'direct_import_in_error' => 'setDirectImportInError',
        'deleted' => 'setDeleted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'on_budget' => 'getOnBudget',
        'closed' => 'getClosed',
        'note' => 'getNote',
        'balance' => 'getBalance',
        'cleared_balance' => 'getClearedBalance',
        'uncleared_balance' => 'getUnclearedBalance',
        'transfer_payee_id' => 'getTransferPayeeId',
        'direct_import_linked' => 'getDirectImportLinked',
        'direct_import_in_error' => 'getDirectImportInError',
        'deleted' => 'getDeleted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_CHECKING = 'checking';
    const TYPE_SAVINGS = 'savings';
    const TYPE_CASH = 'cash';
    const TYPE_CREDIT_CARD = 'creditCard';
    const TYPE_LINE_OF_CREDIT = 'lineOfCredit';
    const TYPE_OTHER_ASSET = 'otherAsset';
    const TYPE_OTHER_LIABILITY = 'otherLiability';
    const TYPE_PAY_PAL = 'payPal';
    const TYPE_MERCHANT_ACCOUNT = 'merchantAccount';
    const TYPE_INVESTMENT_ACCOUNT = 'investmentAccount';
    const TYPE_MORTGAGE = 'mortgage';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CHECKING,
            self::TYPE_SAVINGS,
            self::TYPE_CASH,
            self::TYPE_CREDIT_CARD,
            self::TYPE_LINE_OF_CREDIT,
            self::TYPE_OTHER_ASSET,
            self::TYPE_OTHER_LIABILITY,
            self::TYPE_PAY_PAL,
            self::TYPE_MERCHANT_ACCOUNT,
            self::TYPE_INVESTMENT_ACCOUNT,
            self::TYPE_MORTGAGE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['on_budget'] = $data['on_budget'] ?? null;
        $this->container['closed'] = $data['closed'] ?? null;
        $this->container['note'] = $data['note'] ?? null;
        $this->container['balance'] = $data['balance'] ?? null;
        $this->container['cleared_balance'] = $data['cleared_balance'] ?? null;
        $this->container['uncleared_balance'] = $data['uncleared_balance'] ?? null;
        $this->container['transfer_payee_id'] = $data['transfer_payee_id'] ?? null;
        $this->container['direct_import_linked'] = $data['direct_import_linked'] ?? null;
        $this->container['direct_import_in_error'] = $data['direct_import_in_error'] ?? null;
        $this->container['deleted'] = $data['deleted'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['on_budget'] === null) {
            $invalidProperties[] = "'on_budget' can't be null";
        }
        if ($this->container['closed'] === null) {
            $invalidProperties[] = "'closed' can't be null";
        }
        if ($this->container['balance'] === null) {
            $invalidProperties[] = "'balance' can't be null";
        }
        if ($this->container['cleared_balance'] === null) {
            $invalidProperties[] = "'cleared_balance' can't be null";
        }
        if ($this->container['uncleared_balance'] === null) {
            $invalidProperties[] = "'uncleared_balance' can't be null";
        }
        if ($this->container['transfer_payee_id'] === null) {
            $invalidProperties[] = "'transfer_payee_id' can't be null";
        }
        if ($this->container['deleted'] === null) {
            $invalidProperties[] = "'deleted' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of account. Note: payPal, merchantAccount, investmentAccount, and mortgage types have been deprecated and will be removed in the future.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets on_budget
     *
     * @return bool
     */
    public function getOnBudget()
    {
        return $this->container['on_budget'];
    }

    /**
     * Sets on_budget
     *
     * @param bool $on_budget Whether this account is on budget or not
     *
     * @return self
     */
    public function setOnBudget($on_budget)
    {
        $this->container['on_budget'] = $on_budget;

        return $this;
    }

    /**
     * Gets closed
     *
     * @return bool
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool $closed Whether this account is closed or not
     *
     * @return self
     */
    public function setClosed($closed)
    {
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return int
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param int $balance The current balance of the account in milliunits format
     *
     * @return self
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets cleared_balance
     *
     * @return int
     */
    public function getClearedBalance()
    {
        return $this->container['cleared_balance'];
    }

    /**
     * Sets cleared_balance
     *
     * @param int $cleared_balance The current cleared balance of the account in milliunits format
     *
     * @return self
     */
    public function setClearedBalance($cleared_balance)
    {
        $this->container['cleared_balance'] = $cleared_balance;

        return $this;
    }

    /**
     * Gets uncleared_balance
     *
     * @return int
     */
    public function getUnclearedBalance()
    {
        return $this->container['uncleared_balance'];
    }

    /**
     * Sets uncleared_balance
     *
     * @param int $uncleared_balance The current uncleared balance of the account in milliunits format
     *
     * @return self
     */
    public function setUnclearedBalance($uncleared_balance)
    {
        $this->container['uncleared_balance'] = $uncleared_balance;

        return $this;
    }

    /**
     * Gets transfer_payee_id
     *
     * @return string
     */
    public function getTransferPayeeId()
    {
        return $this->container['transfer_payee_id'];
    }

    /**
     * Sets transfer_payee_id
     *
     * @param string $transfer_payee_id The payee id which should be used when transferring to this account
     *
     * @return self
     */
    public function setTransferPayeeId($transfer_payee_id)
    {
        $this->container['transfer_payee_id'] = $transfer_payee_id;

        return $this;
    }

    /**
     * Gets direct_import_linked
     *
     * @return bool|null
     */
    public function getDirectImportLinked()
    {
        return $this->container['direct_import_linked'];
    }

    /**
     * Sets direct_import_linked
     *
     * @param bool|null $direct_import_linked Whether or not the account is linked to a financial institution for automatic transaction import.
     *
     * @return self
     */
    public function setDirectImportLinked($direct_import_linked)
    {
        $this->container['direct_import_linked'] = $direct_import_linked;

        return $this;
    }

    /**
     * Gets direct_import_in_error
     *
     * @return bool|null
     */
    public function getDirectImportInError()
    {
        return $this->container['direct_import_in_error'];
    }

    /**
     * Sets direct_import_in_error
     *
     * @param bool|null $direct_import_in_error If an account linked to a financial institution (direct_import_linked=true) and the linked connection is not in a healthy state, this will be true.
     *
     * @return self
     */
    public function setDirectImportInError($direct_import_in_error)
    {
        $this->container['direct_import_in_error'] = $direct_import_in_error;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


